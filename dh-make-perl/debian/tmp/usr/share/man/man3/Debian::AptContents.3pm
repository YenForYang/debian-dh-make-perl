.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Debian::AptContents 3pm"
.TH Debian::AptContents 3pm "2018-09-14" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Debian::AptContents \- parse/search through apt\-file's Contents files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    my $c = Debian::AptContents\->new( { homedir => \*(Aq~/.dh\-make\-perl\*(Aq } );
\&    my @pkgs = $c\->find_file_packages(\*(Aq/usr/bin/foo\*(Aq);
\&    my $dep = $c\->find_perl_module_package(\*(AqFoo::Bar\*(Aq);
.Ve
.SH "TODO"
.IX Header "TODO"
This needs to really work not only for Perl modules.
.PP
A module specific to Perl modules is needed by dh-make-perl, but it can
subclass Debian::AptContents, which needs to become more generic.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new" 4
.IX Item "new"
Constructs new instance of the class. Expects at least \f(CW\*(C`homedir\*(C'\fR option.
.SH "FIELDS"
.IX Header "FIELDS"
.IP "homedir" 4
.IX Item "homedir"
(\fBmandatory\fR) Directory where the object stores its cache.
.IP "dist" 4
.IX Item "dist"
Used for filtering on the \f(CW\*(C`distributon\*(C'\fR part of the repository paths listed in
sources.list. Default is empty, meaning no filtering.
.IP "contents_files" 4
.IX Item "contents_files"
Arrayref of \fIContents\fR file names. Default is to let \fBapt-file\fR find them.
.IP "cache_file" 4
.IX Item "cache_file"
Path to the file with cached parsed information from all \fIContents\fR files.
Default is \fIContents.cache\fR under \f(CW\*(C`homedir\*(C'\fR.
.IP "cache" 4
.IX Item "cache"
Filled by \f(CW\*(C`read_cache\*(C'\fR. Used by \f(CW\*(C`find_file_packages\*(C'\fR and (obviously)
\&\f(CW\*(C`store_cache\*(C'\fR
.IP "verbose" 4
.IX Item "verbose"
Verbosity level. 0 means silent, the bigger the more the jabber. Default is 1.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
.IP "warning" 4
.IX Item "warning"
Used internally. Given a verbosity level and a message, prints the message to
\&\s-1STDERR\s0 if the verbosity level is greater than or equal of the value of
\&\f(CW\*(C`verbose\*(C'\fR.
.IP "get_contents_files" 4
.IX Item "get_contents_files"
Reads \fIsources.list\fR, gives the repository paths to
\&\f(CW\*(C`repo_source_to_contents_paths\*(C'\fR and returns an arrayref of file names of
Contents files.
.IP "read_cache" 4
.IX Item "read_cache"
Reads the cached parsed \fIContents\fR files. If there are \fIContents\fR files with
more recent mtime than that of the cache (or if there is no cache at all),
parses all \fIContents\fR and stores the cache via \f(CW\*(C`store_cache\*(C'\fR for later
invocation.
.IP "store_cache" 4
.IX Item "store_cache"
Writes the contents of the parsed \f(CW\*(C`cache\*(C'\fR to the \f(CW\*(C`cache_file\*(C'\fR.
.Sp
Storable is used to stream the data. Along with the information from
\&\fIContents\fR files, a time stamp is stored.
.IP "find_file_packages" 4
.IX Item "find_file_packages"
Returns a list of packages where the given file was found.
.Sp
\&\fIContents\fR files store the package section together with package name. That is
stripped.
.Sp
Returns an empty list of the file is not found in any package.
.ie n .IP "find_perl_module_package( $module, $version )" 4
.el .IP "find_perl_module_package( \f(CW$module\fR, \f(CW$version\fR )" 4
.IX Item "find_perl_module_package( $module, $version )"
Given Perl module name (e.g. Foo::Bar), returns a Debian::Dependency object
representing the required Debian package and version. If the module is a core
one, suitable dependency on perl is returned.
.Sp
If the package is also available in a separate package, an alternative
dependency is returned.
.Sp
In case the version of the currently running Perl interpreter is lower than the
version in which the wanted module is available in core, the separate package
is preferred. Otherwise the perl dependency is the first alternative.
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Damyan Ivanov <dmn@debian.org>" 4
.IX Item "Damyan Ivanov <dmn@debian.org>"
.PD 0
.IP "gregor herrmann <gregoa@debian.org>" 4
.IX Item "gregor herrmann <gregoa@debian.org>"
.PD
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
.IP "Copyright (C) 2008, 2009, 2010, 2017 Damyan Ivanov <dmn@debian.org>" 4
.IX Item "Copyright (C) 2008, 2009, 2010, 2017 Damyan Ivanov <dmn@debian.org>"
.PD 0
.IP "Copyright (C) 2016, gregor herrmann <gregoa@debian.org>" 4
.IX Item "Copyright (C) 2016, gregor herrmann <gregoa@debian.org>"
.PD
.PP
This program is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 General Public License version 2 as published by the Free
Software Foundation.
.PP
This program is distributed in the hope that it will be useful, but \s-1WITHOUT ANY
WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A
PARTICULAR PURPOSE.\s0  See the \s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, \s-1MA 02110\-1301 USA.\s0
