.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Debian::Control::FromCPAN 3pm"
.TH Debian::Control::FromCPAN 3pm "2018-09-14" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Debian::Control::FromCPAN \- fill debian/control from unpacked CPAN distribution
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    my $c = Debian::Control::FromCPAN\->new();
\&    $c\->discover_dependencies( { ... } );
\&    $c\->prune_perl_deps;
\&
\&    Debian::Control::FromCPAN inherits from L<Debian::Control>.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "discover_dependencies( [ { options hash } ] )" 4
.IX Item "discover_dependencies( [ { options hash } ] )"
Discovers module dependencies and fills the dependency fields in
\&\fIdebian/control\fR accordingly.
.Sp
Options:
.RS 4
.IP "apt_contents" 4
.IX Item "apt_contents"
An instance of Debian::AptContents to be used when locating to which package
a required module belongs.
.IP "dpkg_available An instance of DPKG::Parse::Available to be used when checking whether the locally available package is the required version. For example:" 4
.IX Item "dpkg_available An instance of DPKG::Parse::Available to be used when checking whether the locally available package is the required version. For example:"
.Vb 2
\&    my $available = DPKG::Parse::Available\->new;
\&    $available\->parse;
.Ve
.IP "dir" 4
.IX Item "dir"
The directory where the cpan distribution was unpacked.
.IP "intrusive" 4
.IX Item "intrusive"
A flag indicating permission to use Module::Depends::Intrusive for
discovering dependencies in case Module::Depends fails. Since this requires
loading all Perl modules in the distribution (and running their \s-1BEGIN\s0 blocks
(and the \s-1BEGIN\s0 blocks of their dependencies, recursively), it is recommended to
use this only when dealing with trusted sources.
.IP "require_deps" 4
.IX Item "require_deps"
If true, causes the method to die if some a package for some dependency cannot
be found. Otherwise only a warning is issued.
.IP "verbose" 4
.IX Item "verbose"
.PD 0
.IP "wnpp_query" 4
.IX Item "wnpp_query"
.PD
An instance of Debian::WNPP::Query to be used when checking for \s-1WNPP\s0 bugs of
depended upon packages.
.RE
.RS 4
.Sp
Returns a list of module names for which no suitable Debian packages were
found.
.RE
.IP "find_debs_for_modules \fIdep hash\fR[, \s-1APT\s0 contents[, verbose[, \s-1DPKG\s0 available]]]" 4
.IX Item "find_debs_for_modules dep hash[, APT contents[, verbose[, DPKG available]]]"
Scans the given hash of dependencies ( module => version ) and returns
matching Debian package dependency specification (as an instance of
Debian::Dependencies class) and a list of missing modules.
.Sp
Perl core is searched first, then installed packages, then the \s-1APT\s0 contents.
.Sp
If a DPKG::Parse::Available object is passed, also check the available package version
.IP "prune_simple_perl_dep" 4
.IX Item "prune_simple_perl_dep"
Input:
.RS 4
.IP "dependency object" 4
.IX Item "dependency object"
shall be a simple dependency (no alternatives)
.IP "(optional) build dependency flag" 4
.IX Item "(optional) build dependency flag"
true value indicates the dependency is a build-time one
.RE
.RS 4
.Sp
The following checks are made
.ie n .IP "dependencies on ""perl\-modules*""" 4
.el .IP "dependencies on \f(CWperl\-modules*\fR" 4
.IX Item "dependencies on perl-modules*"
These are replaced with \f(CW\*(C`perl\*(C'\fR as per Perl policy.
.ie n .IP "dependencies on ""perl\-base"" and build-dependencies on ""perl"" or ""perl\-base""" 4
.el .IP "dependencies on \f(CWperl\-base\fR and build-dependencies on \f(CWperl\fR or \f(CWperl\-base\fR" 4
.IX Item "dependencies on perl-base and build-dependencies on perl or perl-base"
These are removed, unless they specify a version greater than the one available
in \f(CW\*(C`oldstable\*(C'\fR or the dependency relation is not \f(CW\*(C`>=\*(C'\fR or \f(CW\*(C`>>\*(C'\fR.
.RE
.RS 4
.Sp
Return value:
.IP "undef" 4
.IX Item "undef"
if the dependency is redundant.
.IP "pruned dependency" 4
.IX Item "pruned dependency"
otherwise. \f(CW\*(C`perl\-modules*\*(C'\fR replaced with \f(CW\*(C`perl\*(C'\fR.
.RE
.RS 4
.RE
.IP "prune_perl_dep" 4
.IX Item "prune_perl_dep"
Similar to \*(L"prune_simple_perl_dep\*(R", but supports alternative dependencies.
If any of the alternatives is redundant, the whole dependency is considered
redundant.
.IP "prune_perl_deps" 4
.IX Item "prune_perl_deps"
Remove redundant (build\-)dependencies on perl, libperl, perl-modules and
perl-base.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.IP "module_name_to_pkg_name" 4
.IX Item "module_name_to_pkg_name"
Receives a perl module name like \f(CW\*(C`Foo::Bar\*(C'\fR and returns a suitable Debian
package name for it, like \f(CW\*(C`libfoo\-bar\-perl\*(C'\fR.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (C) 2009, 2010, 2012 Damyan Ivanov dmn@debian.org
.PP
This program is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 General Public License version 2 as published by the Free
Software Foundation.
.PP
This program is distributed in the hope that it will be useful, but \s-1WITHOUT ANY
WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A
PARTICULAR PURPOSE.\s0
