.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Debian::Control::Stanza::Source 3pm"
.TH Debian::Control::Stanza::Source 3pm "2018-09-14" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Debian::Control::Stanza::Source \- source stanza of Debian source package control file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    my $src = Debian::Control::Stanza::Source\->new(\e%data);
\&    print $src;                         # auto\-stringification
\&    print $src\->Build_Depends;          # Debian::Dependencies object
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Debian::Control::Stanza::Source can be used for representation and manipulation
of \f(CW\*(C`Source:\*(C'\fR stanza of Debian source package control files in an
object-oriented way. Converts itself to a textual representation in string
context.
.SH "FIELDS"
.IX Header "FIELDS"
The supported fields for source stanzas are listed below. For more information
about each field's meaning, consult the section named \f(CW\*(C`Source package control
files \-\- debian/control\*(C'\fR of the Debian Policy Manual at
<https://www.debian.org/doc/debian\-policy/>
.PP
Note that real control fields may contain dashes in their names. These are
replaced with underscores.
.IP "Source" 4
.IX Item "Source"
.PD 0
.IP "Section" 4
.IX Item "Section"
.IP "Priority" 4
.IX Item "Priority"
.IP "Maintainer" 4
.IX Item "Maintainer"
.IP "Uploaders" 4
.IX Item "Uploaders"
.IP "DM_Upload_Allowed" 4
.IX Item "DM_Upload_Allowed"
.IP "Build_Conflicts" 4
.IX Item "Build_Conflicts"
.IP "Build_Conflicts_Indep" 4
.IX Item "Build_Conflicts_Indep"
.IP "Build_Depends" 4
.IX Item "Build_Depends"
.IP "Build_Depends_Indep" 4
.IX Item "Build_Depends_Indep"
.IP "Standards_Version" 4
.IX Item "Standards_Version"
.IP "Vcs_Browser" 4
.IX Item "Vcs_Browser"
.IP "Vcs_Bzr" 4
.IX Item "Vcs_Bzr"
.IP "Vcs_CVS" 4
.IX Item "Vcs_CVS"
.IP "Vcs_Git" 4
.IX Item "Vcs_Git"
.IP "Vcs_Svn" 4
.IX Item "Vcs_Svn"
.IP "Homepage" 4
.IX Item "Homepage"
.IP "Testsuite" 4
.IX Item "Testsuite"
.IP "Rules_Requires_Root" 4
.IX Item "Rules_Requires_Root"
.PD
.PP
All Build_... fields are converted into objects of Debian::Dependencies
class upon construction.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new" 4
.IX Item "new"
.PD 0
.IP "new( { field => value, ... } )" 4
.IX Item "new( { field => value, ... } )"
.PD
Creates a new Debian::Control::Stanza::Source object and optionally
initializes it with the supplied data.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Debian::Control::Stanza::Source inherits most of its functionality from
Debian::Control::Stanza
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (C) 2009 Damyan Ivanov dmn@debian.org
.PP
This program is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 General Public License version 2 as published by the Free
Software Foundation.
.PP
This program is distributed in the hope that it will be useful, but \s-1WITHOUT ANY
WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A
PARTICULAR PURPOSE.\s0
