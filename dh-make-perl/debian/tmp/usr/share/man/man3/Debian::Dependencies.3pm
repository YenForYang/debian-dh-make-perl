.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Debian::Dependencies 3pm"
.TH Debian::Dependencies 3pm "2018-09-14" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Debian::Dependencies \- a list of Debian::Dependency objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    my $dl = Debian::Dependencies\->new(\*(Aqperl, libfoo\-perl (>= 3.4)\*(Aq);
\&    print $dl\->[1]\->ver;      # 3.4
\&    print $dl\->[1];           # libfoo\-perl (>= 3.4)
\&    print $dl;                # perl, libfoo\-perl (>= 3.4)
\&
\&    $dl += \*(Aqlibbar\-perl\*(Aq;
\&    print $dl;                # perl, libfoo\-perl (>= 3.4), libbar\-perl
\&
\&    print Debian::Dependencies\->new(\*(Aqperl\*(Aq) + \*(Aqlibfoo\-bar\-perl\*(Aq;
\&                              # simple \*(Aqsum\*(Aq
\&
\&    print Debian::Dependencies\->new(\*(Aqperl\*(Aq)
\&          + Debian::Dependencies\->new(\*(Aqlibfoo, libbar\*(Aq);
\&                              # add (concatenate) two lists
\&
\&    print Debian::Dependencies\->new(\*(Aqperl\*(Aq)
\&          + Debian::Dependency\->new(\*(Aqfoo\*(Aq);
\&                              # add dependency to a list
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Debian::Dependencies a list of Debian::Dependency objects, with automatic
construction and stringification.
.PP
Objects of this class are blessed array references. You can safely treat them
as arrayrefs, as long as the elements you put in them are instances of the
Debian::Dependency class.
.PP
When used in string context, Debian::Dependencies converts itself into a
comma-delimited list of dependencies, suitable for dependency fields of
\&\fIdebian/control\fR files.
.SS "\s-1CLASS METHODS\s0"
.IX Subsection "CLASS METHODS"
.IP "new(dependency\-string)" 4
.IX Item "new(dependency-string)"
Constructs a new Debian::Dependencies object. Accepts one scalar argument,
which is parsed and turned into an arrayref of Debian::Dependency objects.
Each dependency should be delimited by a comma and optional space. The exact
regular expression is \f(CW\*(C`/\es*,\es*/\*(C'\fR.
.SS "\s-1OBJECT METHODS\s0"
.IX Subsection "OBJECT METHODS"
.IP "add( \fIdependency\fR[, ... ] )" 4
.IX Item "add( dependency[, ... ] )"
Adds \fIdependency\fR (or a list of) to the list of dependencies. If the new
dependency is a subset of or overlaps some of the old dependencies, it is not
duplicated.
.Sp
.Vb 3
\&    my $d = Debian::Dependencies(\*(Aqfoo, bar (<=4)\*(Aq);
\&    $d\->add(\*(Aqfoo (>= 4), bar\*(Aq);
\&    print "$d";     # foo (>= 4), bar (>= 4)
.Ve
.Sp
\&\fIdependency\fR can be either a Debian::Dependency object, a
Debian::Deendencies object, or a string (in which case it is converted to an
instance of the Debian::Dependencies class).
.IP "remove( \fIdependency\fR, ... )" 4
.IX Item "remove( dependency, ... )"
.PD 0
.IP "remove( \fIdependencies\fR, ... )" 4
.IX Item "remove( dependencies, ... )"
.PD
Removes a dependency from the list of dependencies. Instances of
Debian::Dependency and Debian::Dependencies classes are supported as
arguments.
.Sp
Any non-reference arguments are coerced to instances of Debian::Dependencies
class.
.Sp
Only dependencies that are subset of the given dependencies are removed:
.Sp
.Vb 3
\&    my $deps = Debian::Dependencies\->new(\*(Aqfoo (>= 1.2), bar\*(Aq);
\&    $deps\->remove(\*(Aqfoo, bar (>= 2.0)\*(Aq);
\&    print $deps;    # bar
.Ve
.Sp
Returns the list of the dependencies removed.
.IP "has( \fIdep\fR )" 4
.IX Item "has( dep )"
Return true if the dependency list contains given dependency. In other words,
this returns true if the list of dependencies guarantees that the given
dependency will be satisfied. For example, \f(CW\*(C`foo, bar\*(C'\fR satisfies \f(CW\*(C`foo\*(C'\fR, but
not \f(CW\*(C`foo (>= 5)\*(C'\fR.
.IP "\fBprune()\fR" 4
.IX Item "prune()"
This method is deprecated. If you want to sort the dependency list, either call \*(L"sort\*(R" or use normal perl sorting stuff on the dereferenced array.
.IP "\fBsort()\fR" 4
.IX Item "sort()"
Sorts the dependency list by package name, version and relation.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Debian::Dependency
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Damyan Ivanov <dmn@debian.org>" 4
.IX Item "Damyan Ivanov <dmn@debian.org>"
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
.PD 0
.IP "Copyright (C) 2008, 2009, 2010 Damyan Ivanov <dmn@debian.org>" 4
.IX Item "Copyright (C) 2008, 2009, 2010 Damyan Ivanov <dmn@debian.org>"
.IP "Copyright (C) 2009 gregor herrmann <gregoa@debian.org>" 4
.IX Item "Copyright (C) 2009 gregor herrmann <gregoa@debian.org>"
.PD
.PP
This program is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 General Public License version 2 as published by the Free
Software Foundation.
.PP
This program is distributed in the hope that it will be useful, but \s-1WITHOUT ANY
WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A
PARTICULAR PURPOSE.\s0  See the \s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, \s-1MA 02110\-1301 USA.\s0
