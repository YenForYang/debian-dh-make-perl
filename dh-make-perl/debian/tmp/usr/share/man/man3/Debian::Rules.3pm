.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Debian::Rules 3pm"
.TH Debian::Rules 3pm "2018-09-14" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Debian::Rules \- handy manipulation of debian/rules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    my $r = Debian::Rules\->new(\*(Aqdebian/rules\*(Aq);
\&
\&    my $r = Debian::Rules\->new( { filename => \*(Aqdebian/rules\*(Aq } );
\&
\&    $r\->is_dhtiny && print "Using the latest and greatest\en";
\&    $r\->is_quiltified && print "quilt rules the rules\en";
\&
\&    # file contents changed externally
\&    $r\->parse;
\&
\&    $r\->add_quilt;
\&    $r\->drop_quilt;
\&
\&    $r\->write;  # or undef($r);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Some times, one needs to know whether \fIdebian/rules\fR uses the \fBdh\fR\|(1)
tiny variant, or whether it is integrated with \fBquilt\fR\|(1). Debian::Rules
provides facilities to check this, as well as adding/removing quilt
integration.
.PP
Modified contents are written to file either vie the \*(L"write\*(R" method, or when
the object reference goes out of scope (via \s-1DESTROY\s0).
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
\&\f(CW\*(C`new\*(C'\fR is the standard Class::Accessor constructor, with the exception that
if only one, non-reference argument is provided, it is treated as a value for
the filename field.
.PP
If a file name is given, the constructor calls \*(L"read\*(R" to read the file
contents into memory.
.PP
One of \fBfilename\fR or \fBlines\fR is mandatory.
.SH "FIELDS"
.IX Header "FIELDS"
.IP "filename" 4
.IX Item "filename"
Contains the file name of the rules file.
.IP "lines" 4
.IX Item "lines"
Reference to an array pointing to the rules file. Initialized by \*(L"new\*(R".
.SH "METHODS"
.IX Header "METHODS"
.IP "parse" 4
.IX Item "parse"
Parses the rules file and stores its findings for later use. Called
automatically by is_dhtiny and is_quiltified. The result of the parsing
is cached and subsequent calls to \f(CW\*(C`is_XXX\*(C'\fR use the cache. To force cache
refresh (for example if the contents of the file have been changed), call
\&\f(CW\*(C`parse\*(C'\fR again.
.IP "is_dhtiny" 4
.IX Item "is_dhtiny"
Returns true if the contents of the rules file seem to use the so called
\&\fItiny\fR variant offered by \fBdh\fR\|(1). Tiny rules are detected by the
presence of the following two lines:
.Sp
.Vb 2
\&    %:
\&            dh $@
.Ve
.Sp
(any options on the \f(CW\*(C`dh\*(C'\fR command line ignored).
.IP "is_quiltified" 4
.IX Item "is_quiltified"
Returns true if the contents of the rules file indicate that \fBquilt\fR\|(1) is
used. Various styles of \f(CW\*(C`quilt\*(C'\fR integration are detected:
.RS 4
.IP "dh \-\-with=quilt" 4
.IX Item "dh --with=quilt"
.PD 0
.ie n .IP "\fIquilt.make\fR with ""$(QUILT_STAMPFN)"" and ""unpatch"" targets." 4
.el .IP "\fIquilt.make\fR with \f(CW$(QUILT_STAMPFN)\fR and \f(CWunpatch\fR targets." 4
.IX Item "quilt.make with $(QUILT_STAMPFN) and unpatch targets."
.RE
.RS 4
.RE
.IP "add_quilt" 4
.IX Item "add_quilt"
.PD
Integrates \fBquilt\fR\|(1) into the rules. For \fBdh\fR\|(1) \fItiny\fR rules (as
determined by \*(L"is_dhtiny\*(R") \f(CW\*(C`\-\-with=quilt\*(C'\fR is added to every \f(CW\*(C`dh\*(C'\fR
invocation. For the more traditional variant, quilt is integrated via
\&\fIquilt.make\fR and its \f(CW\*(C`$(QUILT_STAMPFN)\*(C'\fR and \f(CW\*(C`unpatch\*(C'\fR targets.
.IP "drop_quilt" 4
.IX Item "drop_quilt"
Removes \fBquilt\fR\|(1) integration. Both \fBdh\fR\|(1) \fItiny\fR style (\f(CW\*(C`dh
\&\-\-with=quilt\*(C'\fR) and traditional (\f(CW\*(C`$(QUILT_STAMPFN)\*(C'\fR and \f(CW\*(C`unpatch\*(C'\fR)
approaches are detected and removed.
.IP "read [\fIfile name\fR]" 4
.IX Item "read [file name]"
Replaces the current rules content with the content of \fIfilename\fR. If
\&\fIfilename\fR is not given, uses the value of the \*(L"filename\*(R" member.
.IP "write [\fIfilename\fR]" 4
.IX Item "write [filename]"
Writes the in-memory contents \fIfilename\fR. If not given, uses the value of the
\&\*(L"filename\*(R" member.
.Sp
If \*(L"lines\*(R" points to an empty array, the file is removed.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
.IP "Copyright (C) 2009, 2010 Damyan Ivanov <dmn@debian.org>" 4
.IX Item "Copyright (C) 2009, 2010 Damyan Ivanov <dmn@debian.org>"
.PD 0
.IP "Copyright (C) 2014 gregor herrmann <gregoa@debian.org>" 4
.IX Item "Copyright (C) 2014 gregor herrmann <gregoa@debian.org>"
.PD
.PP
This program is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 General Public License version 2 as published by the Free
Software Foundation.
.PP
This program is distributed in the hope that it will be useful, but \s-1WITHOUT ANY
WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A
PARTICULAR PURPOSE.\s0  See the \s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, \s-1MA 02110\-1301 USA.\s0
