.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DhMakePerl::Utils 3pm"
.TH DhMakePerl::Utils 3pm "2018-09-14" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DhMakePerl::Utils \- helper routines for dh\-make\-perl and alike
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use DhMakePerl::Utils qw(is_core_module);
\&
\&    my $v = is_core_module(\*(AqTest::More\*(Aq, \*(Aq1.002\*(Aq);
\&    my $v = nice_perl_ver(\*(Aq5.010001\*(Aq);
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
None of he following functions is exported by default.
.IP "apt_cache" 4
.IX Item "apt_cache"
Evaluate the creation of an AptPkg::Cache, and return it on success
.IP "find_cpan_module" 4
.IX Item "find_cpan_module"
Returns CPAN::Module object that corresponds to the supplied argument. Returns
undef if no module is found by \s-1CPAN.\s0
.Sp
If the \s-1CPAN\s0 module needs to be configured in some way, that should be done
before calling this function.
.IP "find_cpan_distribution" 4
.IX Item "find_cpan_distribution"
Returns CPAN::Distribution object that corresponds to the supplied argument.
Returns undef if no distribution is found by \s-1CPAN.\s0
.Sp
If the \s-1CPAN\s0 module needs to be configured in some way, that should be done
before calling this function.
.IP "is_core_perl_package \fIpackage\fR" 4
.IX Item "is_core_perl_package package"
Returns true value if the given package is a core Perl package, i.e. one of
\&\f(CW\*(C`perl\*(C'\fR, \f(CW\*(C`perl\-base\*(C'\fR, \f(CW\*(C`perl\-modules\-X.Y\*(C'\fR and \f(CW\*(C`libperlX.Y\*(C'\fR.
.Sp
Having this in a central routine makes it easier to add/remove packages in the
list.
.IP "is_core_module \fImodule\fR, \fIversion\fR" 4
.IX Item "is_core_module module, version"
Returns the version of the \f(CW\*(C`perl\*(C'\fR package containing the given \fImodule\fR (at
least version \fIversion\fR).
.Sp
Returns \f(CW\*(C`undef\*(C'\fR if \fImodule\fR is not a core module (anymore) in the current
\&\f(CW\*(C`perl\*(C'\fR release.
.IP "nice_perl_ver \fIversion_string\fR" 4
.IX Item "nice_perl_ver version_string"
Re-formats perl version to match Debian's perl package versions.
.Sp
For example \f(CW5.010\fR (and \f(CW5.01\fR) is converted to \f(CW5.10\fR.
.IP "core_module_perls \fImodule\fR[, \fImin-version\fR]" 4
.IX Item "core_module_perls module[, min-version]"
Returns a list of Perl versions that have \fImodule\fR. If \fImin-version\fR is
given, the list contains only Perl versions containing \fImodule\fR at least
version \fImin-version\fR.
.ie n .IP "find_core_perl_dependency( $module[, $version] )" 4
.el .IP "find_core_perl_dependency( \f(CW$module\fR[, \f(CW$version\fR] )" 4
.IX Item "find_core_perl_dependency( $module[, $version] )"
return a dependency on perl containing the required module version. If the
module is not available in any perl released by Debian, , or if it is not in
the current perl anymore, return undef.
.IP "split_version_relation \fIstring\fR" 4
.IX Item "split_version_relation string"
Splits the string, typically found in dependency fields' values in \s-1CPAN META\s0
into relation and version. If no relation is found in the string, \f(CW\*(C`>=\*(C'\fR is
assumed.
.Sp
Returns a list of relation and version. The relation is suitable for using in
Debian package dependency version requirements.
.Sp
For example
.RS 4
.IP "split_version_relation('0.45') returns ( '>=', '0.45' )" 4
.IX Item "split_version_relation('0.45') returns ( '>=', '0.45' )"
.PD 0
.IP "split_version_relation('< 0.56') returns ( '<<', '0.56' )" 4
.IX Item "split_version_relation('< 0.56') returns ( '<<', '0.56' )"
.RE
.RS 4
.RE
.PD
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
.IP "Copyright (C) 2008, 2009, 2010 Damyan Ivanov <dmn@debian.org>" 4
.IX Item "Copyright (C) 2008, 2009, 2010 Damyan Ivanov <dmn@debian.org>"
.PP
This program is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 General Public License version 2 as published by the Free
Software Foundation.
.PP
This program is distributed in the hope that it will be useful, but \s-1WITHOUT ANY
WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A
PARTICULAR PURPOSE.\s0  See the \s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, \s-1MA 02110\-1301 USA.\s0
